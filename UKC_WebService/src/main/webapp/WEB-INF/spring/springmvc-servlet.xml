<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
 http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans.xsd
 http://www.springframework.org/schema/context
 http://www.springframework.org/schema/context/spring-context.xsd
 http://www.springframework.org/schema/mvc 
 http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- Element : component-scan Scans the classpath for annotated components 
		that will be auto-registered as Spring beans. By default, the Spring-provided 
		@Component, @Repository, @Service, and @Controller stereotypes will be detected. 
		Note: This tag implies the effects of the 'annotation-config' tag, activating 
		@Required, @Autowired, @PostConstruct, @PreDestroy, @Resource, @PersistenceContext 
		and @PersistenceUnit annotations in the component classes, which is usually 
		desired for autodetected components (without external configuration). Turn 
		off the 'annotation- config' attribute to deactivate this default behavior, 
		for example in order to use custom BeanPostProcessor definitions for handling 
		those annotations. Note: You may use placeholders in package paths, but only 
		resolved against system properties (analogous to resource paths). A component 
		scan results in new bean definition being registered; Spring's PropertyPlaceholderConfigurer 
		will apply to those bean definitions just like to regular bean definitions, 
		but it won't apply to the component scan settings themselves. See javadoc 
		for org.springframework.context.annotation.ComponentScan for information 
		on code-based alternatives to bootstrapping component-scanning. -->

	<!-- Content Model : (include-filter*, exclude-filter*) -->

	<!-- Attribute : base-package The comma/semicolon/space/tab/linefeed-separated 
		list of packages to scan for annotated components. -->
	<context:component-scan base-package="com.ukc.rest.controller" />

	<!-- Element : annotation-config Activates various annotations to be detected 
		in bean classes: Spring's @Required and @Autowired, as well as JSR 250's 
		@PostConstruct, @PreDestroy and @Resource (if available), JAX-WS's @WebServiceRef 
		(if available), EJB3's @EJB (if available), and JPA's @PersistenceContext 
		and @PersistenceUnit (if available). Alternatively, you may choose to activate 
		the individual BeanPostProcessors for those annotations. Note: This tag does 
		not activate processing of Spring's @Transactional or EJB3's @TransactionAttribute 
		annotation. Consider the use of the <tx:annotation-driven> tag for that purpose. 
		See javadoc for org.springframework.context.annotation.AnnotationConfigApplicationContext 
		for information on code-based alternatives to bootstrapping annotation-driven 
		support. from XML. -->
	<context:annotation-config />

	<!-- Element : annotation-driven Configures the annotation-driven Spring 
		MVC Controller programming model. Note that this tag works in Web MVC only, 
		not in Portlet MVC! See org.springframework.web.servlet.config.annotation.EnableWebMvc 
		javadoc for details on code-based alternatives to enabling annotation-driven 
		Spring MVC support. -->

	<!-- Content Model : all(path-matching?, message-converters?, argument-resolvers?, 
		return-value-handlers?, async- support?)? -->

	<!-- Attribute : content-negotiation-manager The bean name of a ContentNegotiationManager 
		that is to be used to determine requested media types. If not specified, 
		a default ContentNegotiationManager is configured that checks the request 
		path extension first and the "Accept" header second where path extensions 
		such as ".json", ".xml", ".atom", and ".rss" are recognized if Jackson, JAXB2, 
		or the Rome libraries are available. As a fallback option, the path extension 
		is also used to perform a lookup through the ServletContext and the Java 
		Activation Framework (if available). -->
	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager"  />

	<bean id="contentNegotiationManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="favorPathExtension" value="true" />
		<property name="favorParameter" value="false" />
		<property name="parameterName" value="mediaType" />
		<property name="ignoreAcceptHeader" value="false" />
		<property name="useJaf" value="false" />
		<property name="defaultContentType" value="application/json" />

		<property name="mediaTypes">
			<map>
				<entry key="pdf" value="application/pdf" />
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
			</map>
		</property>

	</bean>

	<!-- resolves the views -->
	<bean id="viewResolver"
    	      class="org.springframework.web.servlet.view.InternalResourceViewResolver" >
		<property name="prefix">
			<value>/WEB-INF/views/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>

	<bean
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		id="multipartResolver" />

	<!-- The following tags supports internationlization -->
	<!-- messageSource reads the properties file values with the name messages -->
	<!-- <bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:messages" />
	</bean> -->


</beans>